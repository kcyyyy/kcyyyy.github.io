<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bootstrap4源码阅读体会</title>
    <url>/2019/12/19/bootstrap4%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BD%93%E4%BC%9A/</url>
    <content><![CDATA[<p>bootstrap使用了很长时间，是页面快速开发的一把利器。最近，bootstrap4马上呼之欲出，春节闲来无事，就从源码层面解读下。</p>
<ol>
<li>移动优先</li>
</ol>
<p>在移动互联网时代，很多公司都坚持移动端优先的原则，bootstrap也迎合了这种需求，具体表现在如下方面:</p>
<ul>
<li>相对单位: %、rem的大量使用</li>
<li>grid系统: 为了使用不同的设备，grid系统对xs、sm、md、lg、xl进行了响应式设计，通过media query做到适配</li>
<li>支持flexbox: mobile应该很快就可以使用flexbox</li>
</ul>
<ol start="2">
<li>代码结构</li>
</ol>
<p>2.1 从less到saas<br>使用sass作为bootstrap的css预处理器，以前对预处理器不是很感冒，认为将简单问题复杂化了。但是通过阅读源码改变了这种认识:</p>
<ul>
<li>css模块化: css很简单、灵活，这是其优点，同时也是一个缺点。通过sass预处理器，可以根据功能将css模块化，便于css的管理</li>
<li>复用: 变量、mixin、function等技术，可以方便地进行代码复用</li>
<li>简洁: 支持each、if等语法，动态输出内容，例如繁琐的grid系统，是通过少量的sass代码做到的</li>
</ul>
<p>2.2 代码层次<br>根据代码的层次，sass的源码分为如下几部分:</p>
<ul>
<li>支撑部分: 包括变量定义、大量的mixin文件，这是整个bootstrap的基础代码，也是进行个性化定制的其实位置</li>
<li>全局部分: normalize.scss用于覆盖各种浏览器的默认行为，保证起始样式的一致性</li>
<li>基础样式部分: 包含了reboot、typography、images、code、table、forms、buttons等，主要是一些常用的基础html元素</li>
<li>grid部分: 选择性支持flexbox，默认情况下是关闭的，只要将$enable-flex=true就可以使用flexbox完成页面的栅格布局</li>
<li>组件部分: 包含大量常用的基础组件，有些需要添加jQuery plugin</li>
<li>工具类部分: 常用的简单样式，例如间距、文本对齐、字体加粗等</li>
</ul>
<ol start="3">
<li>Grid</li>
</ol>
<p>Grid用于页面的整体布局，同时css3也在起草grid布局模块。Grid也可以单独使用，bootstrap4提供了一个单独的文件(bootstrap-grid.scss)来实现栅格系统，具体来说Grid有如下特点:</p>
<ul>
<li>默认情况下是12栅格</li>
<li>栅格可以嵌套使用</li>
<li>支持5种尺寸下的响应式样式</li>
<li>5个尺寸可以组合使用，适配不同终端下终端</li>
<li>支持使用flexbox</li>
</ul>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>数据可视化技术</title>
    <url>/2019/12/19/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>目前数据可视化工具多如牛毛，尤其是随着大数据炒的越来越热，数据可视化成为一个很重要的前端分支。简单了解下业内主要的可视化工具的用法，以便应对复杂多样的业务需求。</p>
<ol>
<li><p>底层实现技术</p>
<ol>
<li>canvas：基于像素的渲染技术，放大缩小很麻烦</li>
<li>SVG：基于XML</li>
<li>VML：只是被IE支持</li>
</ol>
</li>
<li><p>HighChart</p>
<ol>
<li>最大的问题：商业开发需要Money 收费标准</li>
<li>支持IE6+，高版本浏览器使用的是SVG，IE8-使用的是VML</li>
</ol>
</li>
<li><p>echart</p>
<ol>
<li>基于canvas的图表库</li>
<li>文档详细，且是中文的</li>
<li>开源，不收费</li>
<li>可以采用AMD规则的模块加载方式</li>
<li>Echarts功能非常强大，除了基础的图表功能，还有很多创新，如拖拽重计算Echarts提供商业产品常用图表库，底层基于ZRender，创建了坐标系，图例，提示，工具箱等基础组件，并在此上构建出折线图（区域图）、柱状图（条状图）、散点图（气泡图）、K线图、饼图（环形图）、地图、力导向布局图，同时支持任意维度的堆积和多图表混合展现 </li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>网络地址转换（NAT）</title>
    <url>/2019/12/19/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%EF%BC%88NAT%EF%BC%89/</url>
    <content><![CDATA[<p>NAT是解决ipv4地址短缺的方案之一</p>
<p>NAT是将位于子网中的主机与外网连通，子网中所有的主机都可以通过路由器的网络地址转换访问外网。对于外网来说该路由器相当于一台完整的主机，子网内所有主机对外网的访问都被视作这台“主机”发出的访问。同样，外网对子网的主机的访问也是通过访问这个路由器实现的，对于外网而言，子网内部的主机是不可见的。</p>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>地址解析协议（ARP）</title>
    <url>/2019/12/19/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE%EF%BC%88ARP%EF%BC%89/</url>
    <content><![CDATA[<p>地址解析协议（ARP）是指网络地址和MAC地址之间的转换</p>
<p>当一台主机需要向另一台主机发送数据时，需要知道目的主机的ip地址外还需要知道目的主机的mac地址。源主机首先会在自己的ARP表中寻找目的ip对应的mac地址，无法找到则发出一个arp广播包，目的主机收到广播包后发送一个响应报文告知源主机自己的mac地址。</p>
<h4 id="交换机对包的处理："><a href="#交换机对包的处理：" class="headerlink" title="交换机对包的处理："></a>交换机对包的处理：</h4><p>当交换机收到包时，会查找交换机表，其可能遇到三种情况：</p>
<ol>
<li>未找到相应记录，广播该包，将该包发送给除源端口外的所有端口</li>
<li>找到相应记录，且对应端口与源端口不同，将该包转发给相应端口</li>
<li>找到相应端口，但相应端口与源端口相同，将该包丢弃</li>
</ol>
<h4 id="路由器对ARP的处理"><a href="#路由器对ARP的处理" class="headerlink" title="路由器对ARP的处理"></a>路由器对ARP的处理</h4><p>路由器会阻断包括ARP在内的广播包，也就是说主机无法通过以上的方式获取目的主机的mac地址。</p>
<p>当两台主机位于不同子网或网段时，主机之间无法通过交换机通信，这个时候必须借助网关或者路由器。当主机发现访问的主机位于不同网段时，主机会将包发送给路由器，在通过路由器转发该包。</p>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>分库分表使用场景及设计方式</title>
    <url>/2019/12/19/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="一-分表"><a href="#一-分表" class="headerlink" title="一. 分表"></a>一. 分表</h3><p>场景：对于大型的互联网应用来说，数据库单表的记录行数可能达到千万级甚至是亿级，并且数据库面临着极高的并发访问。采用Master-Slave复制模式的MySQL架构，只能够对数据库的读进行扩展，而对数据库的写入操作还是集中在Master上，并且单个Master挂载的Slave也不可能无限制多，Slave的数量受到Master能力和负载的限制。</p>
<p>　　因此，需要对数据库的吞吐能力进行进一步的扩展，以满足高并发访问与海量数据存储的需要！</p>
<p>　　对于访问极为频繁且数据量巨大的单表（百万到千万级别）来说，我们首先要做的就是减少单表的记录条数，以便减少数据查询所需要的时间，提高数据库的吞吐，这就是所谓的分表！</p>
<p>　　在分表之前，首先需要选择适当的分表策略，使得数据能够较为均衡地分不到多张表中，并且不影响正常的查询！ </p>
<p>　　对于互联网企业来说，大部分数据都是与用户关联的，因此，用户id是最常用的分表字段。因为大部分查询都需要带上用户id，这样既不影响查询，又能够使数据较为均衡地分布到各个表中(当然，有的场景也可能会出现冷热数据分布不均衡的情况)</p>
<p>   假设有一张表记录用户购买信息的订单表order，由于order表记录条数太多，将被拆分成256张表。</p>
<p>　　拆分的记录根据user_id%256取得对应的表进行存储，前台应用则根据对应的user_id%256，找到对应订单存储的表进行访问。（即id除以256余数为0则查0号表）</p>
<p>　　这样一来，user_id便成为一个必需的查询条件，否则将会由于无法定位数据存储的表而无法对数据进行访问。</p>
<p>　　注：拆分后表的数量一般为2的n次方，就是上面拆分成256张表的由来！</p>
<h3 id="二-分库"><a href="#二-分库" class="headerlink" title="二. 分库"></a>二. 分库</h3><p>场景：分表能够解决单表数据量过大带来的查询效率下降的问题，但是，却无法给数据库的并发处理能力带来质的提升。面对高并发的读写访问，当数据库master服务器无法承载写操作压力时，不管如何扩展slave服务器，此时都没有意义了。</p>
<p>　　因此，我们必须换一种思路，对数据库进行拆分，从而提高数据库写入能力，这就是所谓的分库!</p>
<p>　　与分表策略相似，分库可以采用通过一个关键字取模的方式，来对数据访问进行路由，还是之前的订单表，假设user_id 字段的值为258，将原有的单库分为256个库，那么应用程序对数据库的访问请求将被路由到第二个库(258%256 = 2)。</p>
<h3 id="三-分库分表"><a href="#三-分库分表" class="headerlink" title="三.分库分表"></a>三.分库分表</h3><p>场景：有时数据库可能既面临着高并发访问的压力，又需要面对海量数据的存储问题，这时需要对数据库既采用分表策略，又采用分库策略，以便同时扩展系统的并发处理能力，以及提升单表的查询性能，这就是所谓的分库分表。</p>
<p>分库分表的策略比前面的仅分库或者仅分表的策略要更为复杂，一种分库分表的路由策略如下：</p>
<p>中间变量 = user_id % (分库数量 * 每个库的表数量)<br>库 = 取整数 (中间变量 / 每个库的表数量)<br>表 = 中间变量 % 每个库的表数量</p>
<p>　　同样采用user_id作为路由字段，首先使用user_id 对库数量*每个库表的数量取模，得到一个中间变量；然后使用中间变量除以每个库表的数量，取整，便得到对应的库；而中间变量对每个库表的数量取模，即得到对应的表。</p>
<p>分库分表策略详细过程如下：<br> 假设将原来的单库单表order拆分成256个库，每个库包含1024个表，那么按照前面所提到的路由策略，对于user_id=262145 的访问，路由的计算过程如下：</p>
<p>中间变量 = 262145 % (256 * 1024) = 1<br>库 = 取整 (1/1024) = 0<br>表 = 1 % 1024 = 1<br> 这就意味着，对于user_id=262145 的订单记录的查询和修改，将被路由到第0个库的第1个order_1表中执行！！！</p>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>同步异步 阻塞非阻塞</title>
    <url>/2019/12/19/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5-%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/</url>
    <content><![CDATA[<p>1.同步与异步</p>
<p>同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)<br>所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p>
<p>而异步则是相反，<em>调用</em>在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>
<p>例1：</p>
<p>之前一直在写JQUERY代码的时候遇到AJAX加载数据都需要考虑代码运行顺序问题。最近的项目用了到AJAX同步。这个同步的意思是当JS代码加载到当前AJAX的时候会把页面里所有的代码停止加载，页面出去假死状态，当这个AJAX执行完毕后才会继续运行其他代码页面假死状态解除，而异步则这个AJAX代码运行中的时候其他代码一样可以运行。 </p>
<p>jquery的async:false,这个属性<br>默认是true：异步，false：同步。</p>
<p>$.ajax({ </p>
<pre><code> type: &quot;post&quot;, 

 url: &quot;path&quot;, 

 cache:false, 

 async:false, 

 dataType: ($.browser.msie) ? &quot;text&quot; : &quot;xml&quot;, 

 success: function(xmlobj){ 

} </code></pre><p>});</p>
<p>有了这个属性可以相对的减少代码运行书序问题，但是如果用的太多，页面假死次数太多。这样反而导致用户体验不佳~！</p>
<p>根据$.Ajax()中 async 和success的官方的解释</p>
<p>async默认的设置值为true，这种情况为异步方式，就是说当ajax发送请求后，在等待server端返回的这个过程中，前台会继续 执行ajax块后面的脚本，直到server端返回正确的结果才会去执行success，也就是说这时候执行的是两个线程，ajax块发出请求后一个线程 和ajax块后面的脚本（另一个线程）例：</p>
<pre><code>$.ajax({  
       type:&quot;POST&quot;, 

       url:&quot;Venue.aspx?act=init&quot;, 

       dataType:&quot;html&quot;, 

       success:function(result){   //function1()

        f1(); 

        f2(); 

    } 

     failure:function (result) {  

        alert(&apos;Failed&apos;);  

     }, </code></pre><p>  } </p>
<p>  function2(); </p>
<p>　　在上例中，当ajax块发出请求后，他将停留function1()，等待server端的返回，但同时（在这个等待过程中），前台会去执行function2(),也就是说，在这个时候出现两个线程，我们这里暂且说为function1() 和function2()。</p>
<pre><code>当把asyn设为false时，这时ajax的请求时同步的，也就是说，这个时候ajax块发出请求后，他会等待在function1（）这个地方，不会去执行function2()，知道function1()部分执行完毕</code></pre><p>例2：<br>你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。<br>而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。<br>2. 阻塞与非阻塞</p>
<p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.</p>
<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>
<p>还是上面的例子，<br>你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。<br>在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。</p>
]]></content>
  </entry>
  <entry>
    <title>FTP断点续传</title>
    <url>/2019/12/19/FTP%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<p>一，最重要的一点，断点续传需要服务器的支持，这个是必要条件。<br>  传统的FTP   SERVER是不支持断点续传的，因为它不支持REST指令，传统的FTP指令（我是指服务器端指令）并不包括REST指令。       </p>
<p>  第二，客户端要知道使用REST等一系列指令来作断点续传。       </p>
<p>  看看断点续传的详细过程（FTP   SERVER）：<br>  首先客户端使用REST指令来告诉FTP   SERVER它需要从文件的某个点开始传，接着用STOR或者RETR命令开始传文件，大概的命令的流程如下：       </p>
<p>  TYPE   I<br>  200   Type   set   to   I.<br>  PASV<br>  227   Entering   Passive   Mode   (204,48,18,69,98,250)<br>  REST   187392<br>  350   Restarting   at   187392.   Send   STORE   or   RETRIEVE   to   initiate   transfer.<br>  RETR   /pub/audio/pci/maestro-3/win2k/1056.zip<br>  150   Opening   BINARY   mode   data   connection   for   /pub/audio/pci/maestro-3/win2k/1056.zip   (936098   bytes).       </p>
<p>  首先使用TYPE命令告诉FTP   SERVER使用BINARY模式传送文件；<br>  然后使用PASV命令告诉FTP   SERVER使用被动打开模式来传送文件；<br>  接着使用REST   187392指令告诉FTP   SERVER要从文件的187392字节开始传送；<br>  最后使用RETR指令来传送文件。       </p>
<p>  从上面可以看出，这个FTP   SERVER支持REST指令，有的FTP   SERVER（特别的老的）是不支持这个指令的，这时即使FTP   CLIENT支持断点续传也一点用都没有！       </p>
<p>  支持断点的FTP   SERVER：Serv-U   FTP，还有一系列的新出现的FTP   SERVER；<br>  不支持断点的：IIS4以前版本所带的都不行，IIS5   有，不家可以测试一下，登录进FTP   SERVER，然后输入REST   1000命令，看服务器是否认识，认识就是支持断点。</p>
<p>FTP实现断点续传</p>
<p>FTP客户端实现要建立两个通道，一个控制命令通道，让FTP服务器知道客户端要干什么，一个数据传输通道。所谓的两个通道只不过是两个调用了connect函数的连接，只是控制命令通道专门用来传输一些字符串命令信息，而数据通道则是用来传输文件。控制命令通道一定是由客户端向服务器的连接（默认的端口是21，也可以指定端口，这要看服务器的设置）。连接的过程完成了FTP的登录。数据通道则不一定啦，具体哪个连哪个，请看下面对PASV命令的解释。 </p>
<p>  其实FTP断点续传的原理很简单，可分为断点下载和断点上传。 </p>
<p>  客户端的实现步骤如下： </p>
<p>一、下载：  </p>
<p>1、向服务器发送“REST + 本地文件长度”命令，告诉服务器，客户端要断点下载了。这时服务器还不知道客户端要下载哪个文件； </p>
<p>   要实现FTP的断点续传，FTP服务器必须支持REST指令，这条指令在FTP协议文本RFC959中就已经定义了，不过它不是FTP服务器必须支持的指令。一般,你可以在下载前使用REST 100命令进行实验，如果服务器正常执行了这条命令，说明该服务器支持FTP断点续传。REST后面跟的数表示下载文件的起始位置，而REST 0表示从文件最开始处下载。REST命令本身并不执行下载功能，你仍需要使用RETR命令执行下载工作。 </p>
<p>2、向服务器发送“RETR + 文件名”命令，通知服务器要下载的文件名，这时服务器开始定位文件指针读文件并发送数据。 </p>
<p>3、客户端定位本地文件指针（文件末尾）； </p>
<p>4、两端的准备工作都做完了以后，客户端创建socket，以被动或非被动方式建立数据通道，循环调用recv接收数据并追加入本地文件； </p>
<p>二、上传： </p>
<p>1、获取服务器上和本地要上传文件的同名文件大小； </p>
<p>2、向服务器发送“APPE ＋ 文件名”，通知服务器，接下来从数据通道发送给你的数据要附加到这个文件末尾。 </p>
<p>3、定位本地文件指针（和FTP上文件大小相同的位置） </p>
<p>4、从文件指针处读数据并发送。 </p>
<p>  好了，FTP断点续传的原理就这么简单。代码里将断点上传和断点下载放到同一个函数（MoveFile）里，通过get参数说明是上传还是下载。当然，整个FTP类的实现有800多行，包括登录、退出、获取FTP文件大小、删除FTP服务器上文件、响应服务器，解析响应信息等函数。相应的注释代码里都有，这里就不一一熬述了。 </p>
<p>  这里重点说说PASV模式，即被动模式，这是FTP命令里比较不容易理解的一个，这条命令请求服务器在某个端口（非FTP默认端口或控制命令端口）创建一个监听socket，服务器创建的端口号会在客户端的控制命令通道上得到响应。得到这个端口号后，客户端就可以创建新的socket（数据通道）connect过去，并进行文件传输等工作。否则，如果为非被动模式，那么监听的socket由客户端创建，服务器connect过来。 </p>
<p>  对于这条命令的存在我是这么理解的，存在这么一种情况：客户端的IP是个内网的IP，服务器的IP是个外网的，当进行数据传输时内网的IP对于服务器是不可见的，只有由服务器启动监听socket才能建立数据通道，所以必须以被动模式进行。：）</p>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>抓包原理</title>
    <url>/2019/12/19/%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h2><h4 id="1-集线器（hub）"><a href="#1-集线器（hub）" class="headerlink" title="1.集线器（hub）"></a>1.集线器（hub）</h4><p>它属于纯硬件网络底层设备，工作于OSI参考模型的第一层，即物理层。不解析。</p>
<p>集线器只对信号进行整形、放大后再重发，不进行编码，转发的时候是以广播的方式进行的，即它要向某节点发送数据时，不是直接把数据发送到目的节点，而是把数据包发送到与集线器相连的所有节点。</p>
<h4 id="2-交换机"><a href="#2-交换机" class="headerlink" title="2.交换机"></a>2.交换机</h4><p>交换机工作于OSI参考模型的第二层，即数据链路层。它可以解析到MAC地址。</p>
<p>交换机是针对共享工作模式（例hub）的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表（ARP表）以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部交换矩阵迅速将数据包传送到目的端口。目的MAC若不存在，交换机才广播（ARP协议）到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表中。</p>
<h4 id="3-路由器"><a href="#3-路由器" class="headerlink" title="3.路由器"></a>3.路由器</h4><p>路由器工作于OSI参考模型的第三层，即数据网络层。它可以解析到IP。</p>
<p>提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过的路由路径（即两个网络或多个网络间转发数据包），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转送。</p>
<p>选择最佳路径的策略即路由算法是路由器的关键所在。为了完成这项工作，在路由器中保存着各种传输路径的相关数据——路径表（Routing Table），供路由选择时使用。路径表中保存着子网的标志信息、网上路由器的个数和下一个路由器的名字等内容。路径表可以是由系统管理员固定设置好的。</p>
<p>静态路由表：由系统管理员事先设置好固定的路径表称之为静态（static）路径表。<br>动态路由表：动态（Dynamic）路径表是路由器根据网络系统的运行情况而自动调整的路径表。</p>
<h4 id="4-网卡"><a href="#4-网卡" class="headerlink" title="4.网卡"></a>4.网卡</h4><p>网卡收到传输来的数据，网卡内的单片程序先接收数据头的目的MAC地址，根据计算机上的网卡驱动程序设置的接收模式判断该不该接收，认为该接收就在接收后产生中断信号通知CPU，认为不该接收就丢弃不管，所以不该接收的数据网卡就截断了，计算机根本就不知道。CPU得到中断信号产生中断，操作系统就根据网卡驱动程序中设置的网卡中断程序地址调用驱动程序接收数据，驱动程序接收数据后放入信号堆栈让操作系统处理。</p>
<h2 id="二、嗅探器原理"><a href="#二、嗅探器原理" class="headerlink" title="二、嗅探器原理"></a>二、嗅探器原理</h2><ul>
<li>收集：从网卡上收集二进制信息（将网卡设置成混杂模式完成抓包）</li>
<li>转换：将捕获的二进制信息转换成可读形式。</li>
<li>分析：对捕获和转换后的数据进行分析。</li>
</ul>
<p>前提，要捕获的东西必须是要物理信号能收到的报文信息。显然只要通知网卡接收其收到的所有包（一般叫做混杂promiscuous模式：指网络上的所有设备都对总线上传送的数据进行侦听，并不仅仅是它们自己的数据。），在HUB下就能接收到这个网段的所有包，但是交换机下就只能是自己的包加上广播包。</p>
<p>要想在交换机下接收别人的包，那就要让其发往你的机器所在端口。交换机记住一个口的MAC是通过接收来自这个口的数据后并记住其源MAC，就像一个机器的IP与MAC对应的ARP列表，交换机维护一个物理口与MAC的表，所以可以欺骗交换机的。可以发一个包设置源MAC是你想接收的机器的MAC，那么交换机就把你机器的网线插的物理口与那个MAC对应起来了，以后发给那个MAC的包就发往你的网线插口了，也就是你的网卡可以Sniffer到了。注意这物理口与MAC的表与机器的ARP表一样是动态刷新的，那机器发包后交换HUB就又记住他的口了，所以实际上是两个在争，这只能应用在只要收听少量包就可以的场合。</p>
<p>内部网基于IP的通信可以用ARP欺骗别人机器让其发送给你的机器，如果要想不影响原来两方的通信，可以欺骗两方，让其都发给你的机器再由你的机器转发，相当于做中间人，这用ARP加上编程很容易实现。并且现在很多设备支持远程管理，有很多交换机可以设置一个口监听别的口，不过这就要管理权限了。</p>
<h2 id="三、抓包工具"><a href="#三、抓包工具" class="headerlink" title="三、抓包工具"></a>三、抓包工具</h2><h4 id="1-wireshark"><a href="#1-wireshark" class="headerlink" title="1.wireshark"></a>1.wireshark</h4><p>wireshark是捕获机器上的某一块网卡的网络包，当你的机器上有多块网卡的时候，你需要选择一个网卡。</p>
<p>使用方法：<a href="https://blog.csdn.net/zjy900507/article/details/79303359" target="_blank" rel="noopener">https://blog.csdn.net/zjy900507/article/details/79303359</a></p>
<h4 id="2-Fiddler"><a href="#2-Fiddler" class="headerlink" title="2.Fiddler"></a>2.Fiddler</h4><p>Fiddler和wireshark工作原理不一样。fiddler的实现原理是以代理服务器的方式工作，代理就是在客户端和服务器之间设置一道关卡，客户端先将请求数据发送出去后，代理服务器会将数据包进行拦截，代理服务器再冒充客户端发送数据到服务器；同理，服务器将响应数据返回，代理服务器也会将数据拦截，再返回给客户端。</p>
<p>Fiddler是一个http协议调试代理工具，即只是针对HTTP协议的（工作在OSI参考模型的应用层），而wireshark是针对几乎所有协议的。</p>
<p>浏览3器与服务器之间通过建立TCP连接以HTTP协议进行通信，浏览器默认通过自己发送HTTP请求到服务器。 而Fiddler是c#开发（微软出品，主要作者Eric Lawrence）的http代理服务器，fiddler工作于七层中的应用层，能够捕获到通过的http(s)请求。（浏览器 &lt; -&gt; Fiddler &lt; -&gt; 服务器）</p>
<p>启动Fiddler之后会监听8888端口（默认8888，可以修改）。</p>
<p>一个实验转自：<a href="https://blog.csdn.net/gscaiyucheng/article/details/26938019" target="_blank" rel="noopener">https://blog.csdn.net/gscaiyucheng/article/details/26938019</a></p>
<p>1.在启动fiddler之前端口8888的状态</p>
<p>命令：netstat -ano|findstr “8888″</p>
<p>表示查不到占用状态</p>
<p>2.启动fiddler之后：</p>
<p>在启动fiddelr之后可以发现8888端口被5256线程给监听</p>
<p>可以查看到5256线程为fiddler程序：</p>
<p>命令：tasklist |findstr “5256″</p>
<p>3.然后启动Chrome浏览器，浏览网页就会发现：</p>
<p>5658进程与fiddler建立了tcp连接，发送端为5658进程占用3258端口，接收端为fiddler（5256）占用的8888端口</p>
<p>命令：netstat -ano|findstr “8888″</p>
<p>查看5568进程，为chrome程序</p>
<p>命令：tasklist |findstr “5568″</p>
<p>同理，打开Firefox浏览器，浏览网页也是如此：</p>
<p>7836进程与fiddler建立了tcp连接，发送端为7836进程占用3294端口，接收端为fiddler（5256）占用的8888端口</p>
<p>命令：netstat -ano|findstr “8888″</p>
<p>查看7836进程，为firefox程序:</p>
<p>命令：tasklist |findstr “7836″</p>
<p>ps：要注意的firefox中需要手工将代理设置成fiddler：127.0.0.1:8888，因为Firefox不是使用系统默认的winINET(不过刚亲自试验发现安装fiddler后，firefox会提示安装fiddler插件，之后就不需要在手动配置了，如果不能监听火狐，就手动配置一下吧~)</p>
<p>所以，fiddler作为一个代理服务器，跟浏览器建立连接之后，浏览器像目标服务器发送的请求都会经过fiddler代理，</p>
<p>所以fiddler可以捕获到http（s）请求，从而可以解释、分析、甚至重写发出去的http（s）请求。</p>
<p>使用方法：<a href="https://www.cnblogs.com/miantest/p/7289694.html" target="_blank" rel="noopener">https://www.cnblogs.com/miantest/p/7289694.html</a></p>
<p>补充一个小知识：</p>
<p>1）127.0.0.1是回送地址，指本地机，一般用来测试使用。回送地址是本机回送地址（Loopback Address），即主机IP堆栈内部的IP地址，主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</p>
<p>2）localhost是本地DNS解析的127.0.0.1的域名，这个你打开本机的hosts文件就可以看到，一般位于c:\windows\system32\driver\etc下，一般在最后有这么一行：127.0.0.1 localhost。我们在本机上安装tomcat默认即监听8080端口，我们访问tomcat里的网页例如<a href="http://localhost:8080/login/to_login。" target="_blank" rel="noopener">http://localhost:8080/login/to_login。</a></p>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2019/12/19/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。</p>
<p>HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。</p>
<p>2014年12月，互联网工程任务组（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组将HTTP/2标准提议递交至IESG进行讨论，于2015年2月17日被批准。 HTTP/2标准于2015年5月以RFC 7540正式发表，取代HTTP 1.1成为HTTP的实现标准。</p>
<h2 id="HTTP协议概述"><a href="#HTTP协议概述" class="headerlink" title="HTTP协议概述"></a>HTTP协议概述</h2><p>HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。</p>
<p>尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。</p>
<p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p>
<h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>
<p>以下是 HTTP 请求/响应的步骤：</p>
<ol>
<li><p>客户端连接到Web服务器<br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.luffycity.com。" target="_blank" rel="noopener">http://www.luffycity.com。</a></p>
</li>
<li><p>发送HTTP请求<br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p>
</li>
<li><p>服务器接受请求并返回HTTP响应<br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p>
</li>
<li><p>释放连接TCP连接<br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p>
</li>
<li><p>客户端浏览器解析HTML内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>
</li>
</ol>
<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>
<ol>
<li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</li>
<li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</li>
<li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li>
<li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</li>
<li>释放 TCP连接;</li>
<li>浏览器将该 html 文本并显示内容; 　</li>
</ol>
<h4 id="HTTP协议是基于TCP-IP协议之上的应用层协议"><a href="#HTTP协议是基于TCP-IP协议之上的应用层协议" class="headerlink" title="HTTP协议是基于TCP/IP协议之上的应用层协议"></a>HTTP协议是基于TCP/IP协议之上的应用层协议</h4><h4 id="基于-请求-响应的模式"><a href="#基于-请求-响应的模式" class="headerlink" title="基于-请求-响应的模式"></a>基于-请求-响应的模式</h4><p>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应</p>
<h4 id="无状态保存"><a href="#无状态保存" class="headerlink" title="无状态保存"></a>无状态保存</h4><p>HTTP是一种不保存状态,即无状态(stateless)协议。HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。</p>
<p>使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成 如此简单的。可是,随着Web的不断发展,因无状态而导致业务处理变得棘手 的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的 其他页面后,也需要能继续保持登录状态。针对这个实例,网站为了能 够掌握是谁送出的请求,需要保存用户的状态。HTTP/1.1虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管 理状态了。有关Cookie的详细内容稍后讲解。</p>
<h4 id="无连接"><a href="#无连接" class="headerlink" title="无连接"></a>无连接</h4><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，并且可以提高并发性能，不能和每个用户建立长久的连接，请求一次相应一次，服务端和客户端就中断了。但是无连接有两种方式，早期的http协议是一个请求一个响应之后，直接就断开了，但是现在的http协议1.1版本不是直接就断开了，而是等几秒钟，这几秒钟是等什么呢，等着用户有后续的操作，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒钟用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数，因为建立连接也是耗时的，默认的好像是3秒中现在，但是这个时间是可以通过咱们后端的代码来调整的，自己网站根据自己网站用户的行为来分析统计出一个最优的等待时间。</p>
<h2 id="TTP状态码"><a href="#TTP状态码" class="headerlink" title="TTP状态码"></a>TTP状态码</h2><p>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</p>
<p>状态代码的第一个数字代表当前响应的类型：</p>
<ul>
<li>1xx消息——请求已被服务器接收，继续处理</li>
<li>2xx成功——请求已成功被服务器接收、理解、并接受</li>
<li>3xx重定向——需要后续操作才能完成这一请求</li>
<li>4xx请求错误——请求含有词法错误或者无法被执行</li>
<li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li>
</ul>
<p>虽然 RFC 2616 中已经推荐了描述状态的短语，例如”200 OK”，”404 Not Found”，但是WEB开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>超文本传输协议（HTTP）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：</p>
<ul>
<li>传送协议。</li>
<li>层级URL标记符号(为[//],固定不变)</li>
<li>访问资源需要的凭证信息（可省略）</li>
<li>服务器。（通常为域名，有时为IP地址）</li>
<li>端口号。（以数字方式表示，若为HTTP的默认值“:80”可省略）</li>
<li>路径。（以“/”字符区别路径中的每一个目录名称）</li>
<li>查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）</li>
<li>片段。以“#”字符为起点</li>
</ul>
<p>以<a href="http://www.luffycity.com:80/news/index.html?id=250&amp;page=1" target="_blank" rel="noopener">http://www.luffycity.com:80/news/index.html?id=250&amp;page=1</a> 为例, 其中：</p>
<ul>
<li>http，是协议；</li>
<li><a href="http://www.luffycity.com，是服务器；" target="_blank" rel="noopener">www.luffycity.com，是服务器；</a></li>
<li>80，是服务器上的默认网络端口号，默认不显示；</li>
<li>/news/index.html，是路径（URI：直接定位到对应的资源）；</li>
<li>?id=250&amp;page=1，是查询。</li>
<li>大多数网页浏览器不要求用户输入网页中“http://”的部分，因为绝大多数网页内容是超文本传输协议文件。同样，“80”是超文本传输协议文件的常用端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分（<a href="http://www.luffycity.com:80/news/index.html?id=250&amp;page=1）就可以了。" target="_blank" rel="noopener">www.luffycity.com:80/news/index.html?id=250&amp;page=1）就可以了。</a></li>
</ul>
<p>由于超文本传输协议允许服务器将浏览器重定向到另一个网页地址，因此许多服务器允许用户省略网页地址中的部分，比如 www。从技术上来说这样省略后的网页地址实际上是一个不同的网页地址，浏览器本身无法决定这个新地址是否通，服务器必须完成重定向的任务。</p>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>TCP协议</title>
    <url>/2019/12/19/TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="为什么会有TCP-IP协议"><a href="#为什么会有TCP-IP协议" class="headerlink" title="为什么会有TCP/IP协议"></a>为什么会有TCP/IP协议</h2><blockquote>
<p>在世界上各地，各种各样的电脑运行着各自不同的操作系统为大家服务，这些电脑在表达同一种信息的时候所使用的方法是千差万别。就好像圣经中上帝打乱了各地人的口音，让他们无法合作一样。计算机使用者意识到，计算机只是单兵作战并不会发挥太大的作用。只有把它们联合起来，电脑才会发挥出它最大的潜力。于是人们就想方设法的用电线把电脑连接到了一起。</p>
</blockquote>
<blockquote>
<p>但是简单的连到一起是远远不够的，就好像语言不同的两个人互相见了面，完全不能交流信息。因而他们需要定义一些共通的东西来进行交流，TCP/IP就是为此而生。TCP/IP不是一个协议，而是一个协议族的统称。里面包括了IP协议，IMCP协议，TCP协议，以及我们更加熟悉的http、ftp、pop3协议等等。电脑有了这些，就好像学会了外语一样，就可以和其他的计算机终端做自由的交流了。</p>
</blockquote>
<h2 id="TCP-IP协议分层"><a href="#TCP-IP协议分层" class="headerlink" title="TCP/IP协议分层"></a>TCP/IP协议分层</h2><blockquote>
<p>TCP/IP协议族按照层次由上到下，层层包装。</p>
</blockquote>
<ul>
<li>应用层:</li>
</ul>
<blockquote>
<p>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。</p>
</blockquote>
<ul>
<li>传输层:</li>
</ul>
<blockquote>
<p>提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。为实现后者，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送。</p>
</blockquote>
<ul>
<li>网络层 ：</li>
</ul>
<blockquote>
<p>负责相邻计算机之间的通信。其功能包括三方面。</p>
</blockquote>
<blockquote>
<p>一、处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。</p>
</blockquote>
<blockquote>
<p>二、处理输入数据报：首先检查其合法性，然后进行寻径–假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。</p>
</blockquote>
<blockquote>
<p>三、处理路径、流控、拥塞等问题。</p>
</blockquote>
<ul>
<li>网络接口层：</li>
</ul>
<blockquote>
<p>这是TCP/IP软件的最低层，负责接收IP数据报并通过网络发送之，或者从网络上接收物理帧，抽出IP数据报，交给IP层</p>
</blockquote>
<h2 id="IP-是无连接的"><a href="#IP-是无连接的" class="headerlink" title="IP 是无连接的"></a>IP 是无连接的</h2><blockquote>
<p>IP 用于计算机之间的通信。</p>
</blockquote>
<blockquote>
<p>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p>
</blockquote>
<blockquote>
<p>通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。</p>
</blockquote>
<blockquote>
<p>IP 负责将每个包路由至它的目的地。</p>
</blockquote>
<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><blockquote>
<p>每个计算机必须有一个 IP 地址才能够连入因特网。</p>
</blockquote>
<blockquote>
<p>每个 IP 包必须有一个地址才能够发送到另一台计算机。</p>
</blockquote>
<blockquote>
<p>网络上每一个节点都必须有一个独立的Internet地址（也叫做IP地址）。现在，通常使用的IP地址是一个32bit的数字，也就是我们常说的IPv4标准，这32bit的数字分成四组，也就是常见的255.255.255.255的样式。IPv4标准上，地址被分为五类，我们常用的是B类地址。具体的分类请参考其他文档。需要注意的是IP地址是网络号+主机号的组合，这非常重要。</p>
</blockquote>
<blockquote>
<p>TCP/IP 使用 32 个比特来编址。一个计算机字节是 8 比特。所以 TCP/IP 使用了 4 个字节。<br>一个计算机字节可以包含 256 个不同的值：<br>00000000、00000001、00000010、00000011、00000100、00000101、00000110、00000111、00001000 ……. 直到 11111111。<br>现在，你知道了为什么 TCP/IP 地址是介于 0 到 255 之间的 4 个数字。</p>
</blockquote>
<h4 id="TCP-使用固定的连接"><a href="#TCP-使用固定的连接" class="headerlink" title="TCP 使用固定的连接"></a>TCP 使用固定的连接</h4><blockquote>
<p>TCP 用于应用程序之间的通信。</p>
</blockquote>
<blockquote>
<p>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p>
</blockquote>
<blockquote>
<p>这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p>
</blockquote>
<blockquote>
<p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p>
</blockquote>
<h4 id="IP-路由器"><a href="#IP-路由器" class="headerlink" title="IP 路由器"></a>IP 路由器</h4><blockquote>
<p>当一个 IP 包从一台计算机被发送，它会到达一个 IP 路由器。</p>
</blockquote>
<blockquote>
<p>IP 路由器负责将这个包路由至它的目的地，直接地或者通过其他的路由器。</p>
</blockquote>
<blockquote>
<p>在一个相同的通信中，一个包所经由的路径可能会和其他的包不同。而路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址。</p>
</blockquote>
<h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><blockquote>
<p>12 个阿拉伯数字很难记忆。使用一个名称更容易。</p>
</blockquote>
<blockquote>
<p>用于 TCP/IP 地址的名字被称为域名。w3school.com.cn 就是一个域名。</p>
</blockquote>
<blockquote>
<p>当你键入一个像 <a href="http://www.w3school.com.cn" target="_blank" rel="noopener">http://www.w3school.com.cn</a> 这样的域名，域名会被一种 DNS 程序翻译为数字。</p>
</blockquote>
<blockquote>
<p>在全世界，数量庞大的 DNS 服务器被连入因特网。DNS 服务器负责将域名翻译为 TCP/IP 地址，同时负责使用新的域名信息更新彼此的系统。</p>
</blockquote>
<blockquote>
<p>当一个新的域名连同其 TCP/IP 地址一同注册后，全世界的 DNS 服务器都会对此信息进行更新。</p>
</blockquote>
<h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><blockquote>
<p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。</p>
</blockquote>
<blockquote>
<p>TCP 负责应用软件（比如你的浏览器）和网络软件之间的通信。</p>
</blockquote>
<blockquote>
<p>IP 负责计算机之间的通信。</p>
</blockquote>
<blockquote>
<p>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。</p>
</blockquote>
<blockquote>
<p>IP 负责将包发送至接受者。</p>
</blockquote>
<h4 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h4><ul>
<li>16位源端口号：16位的源端口中包含初始化通信的端口。源端口和源IP地址的作用是标识报文的返回地址。</li>
<li>16位目的端口号：16位的目的端口域定义传输的目的。这个端口指明报文接收计算机上的应用程序地址接口。</li>
<li>32位序号：32位的序列号由接收端计算机使用，重新分段的报文成最初形式。当SYN出现，序列码实际上是初始序列码（Initial Sequence Number，ISN），而第一个数据字节是ISN+1。这个序列号（序列码）可用来补偿传输中的不一致。</li>
<li>32位确认序号：32位的序列号由接收端计算机使用，重组分段的报文成最初形式。如果设置了ACK控制位，这个值表示一个准备接收的包的序列码。</li>
<li>4位首部长度：4位包括TCP头大小，指示何处数据开始。</li>
<li>保留（6位）：6位值域，这些位必须是0。为了将来定义新的用途而保留。</li>
<li>标志：6位标志域。表示为：紧急标志、有意义的应答标志、推、重置连接标志、同步序列号标志、完成发送数据标志。按照顺序排列是：URG、ACK、PSH、RST、SYN、FIN。</li>
<li>16位窗口大小：用来表示想收到的每个TCP数据段的大小。TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。窗口大小是一个16字节字段，因而窗口大小最大为65535字节。</li>
<li>16位校验和：16位TCP头。源机器基于数据内容计算一个数值，收信息机要与源机器数值 结果完全一样，从而证明数据的有效性。检验和覆盖了整个的TCP报文段：这是一个强制性的字段，一定是由发送端计算和存储，并由接收端进行验证的。</li>
<li>16位紧急指针：指向后面是优先数据的字节，在URG标志设置了时才有效。如果URG标志没有被设置，紧急域作为填充。加快处理标示为紧急的数据段。</li>
<li>选项：长度不定，但长度必须为1个字节。如果没有选项就表示这个1字节的域等于0。</li>
<li>数据：该TCP协议包负载的数据。</li>
<li>在上述字段中，6位标志域的各个选项功能如下。</li>
<li>URG：紧急标志。紧急标志为”1”表明该位有效。</li>
<li>ACK：确认标志。表明确认编号栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号（w+1）为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。</li>
<li>PSH：推标志。该标志置位时，接收端不将该数据进行队列处理，而是尽可能快地将数据转由应用处理。在处理Telnet或rlogin等交互模式的连接时，该标志总是置位的。</li>
<li>RST：复位标志。用于复位相应的TCP连接。</li>
<li>SYN：同步标志。表明同步序列编号栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端（一般是客户端）的初始序列编号。在这里，可以把TCP序列编号看作是一个范围从0到4，294，967，295的32位计数器。通过TCP连接交换的数据中每一个字节都经过序列编号。在TCP报头中的序列编号栏包括了TCP分段中第一个字节的序列编号。</li>
<li>FIN：结束标志。</li>
</ul>
<h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><blockquote>
<p>所谓三次握手（Three-Way Handshake）即建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。在socket编程中，这一过程由客户端执行connect来触发</p>
</blockquote>
<ol>
<li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li>
<li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</li>
<li>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</li>
</ol>
<p>简单来说，就是</p>
<ol>
<li><p>建立连接时，客户端发送SYN包（SYN=i）到服务器，并进入到SYN-SEND状态，等待服务器确认</p>
</li>
<li><p>服务器收到SYN包，必须确认客户的SYN（ack=i+1）,同时自己也发送一个SYN包（SYN=k）,即SYN+ACK包，此时服务器进入SYN-RECV状态</p>
</li>
<li><p>客户端收到服务器的SYN+ACK包，向服务器发送确认报ACK（ack=k+1）,此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手，客户端与服务器开始传送数据。</p>
</li>
</ol>
<h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h4><blockquote>
<p>所谓四次挥手（Four-Way Wavehand）即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发.</p>
</blockquote>
<blockquote>
<p>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭.</p>
</blockquote>
<ol>
<li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</li>
<li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li>
<li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li>
<li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li>
</ol>
]]></content>
      <categories>
        <category>学习资料</category>
      </categories>
  </entry>
  <entry>
    <title>应用层</title>
    <url>/2019/12/19/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    <content><![CDATA[<h3 id="应用层概念"><a href="#应用层概念" class="headerlink" title="应用层概念"></a>应用层概念</h3><blockquote>
<p>应用层的具体作用就是规定应用进程在通信时所遵循的协议</p>
</blockquote>
<h3 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h3><blockquote>
<p>域名系统(DNS)是因特网使用的命名系统，用来把便于人们使用的机器名字转化为IP地址。</p>
</blockquote>
<blockquote>
<p>在1983年，因特网就开始采用层次树状结构的命名方法，并使用分布式的域名系统。</p>
</blockquote>
<blockquote>
<p>DNS使大多数的名字都在本地解析。域名到IP地址的解析，是由分布在因特网上的许多域名服务(也称域名服务器)共同完成的。域名服务器程序在专设的结点上运行，而人们也常把运行域名服务程序的机器称为域名服务器。</p>
</blockquote>
<blockquote>
<p>域名的解析过程：<br>第一，主机向本地域名服务器的查询一般都采用递归查询。<br>第二，本地域名服务器向根域名服务器的查询通常采用迭代查询。</p>
</blockquote>
<h3 id="HDCP服务"><a href="#HDCP服务" class="headerlink" title="HDCP服务"></a>HDCP服务</h3><blockquote>
<p>动态主机配置协议 DHCP：负责给互联网上的计算机提供动态的IP地址。<br>连接到因特网的计算机都需要配置以下几个项目： </p>
<ol>
<li>IP 地址 </li>
<li>子网掩码 </li>
<li>默认路由器的 IP 地址即网关 </li>
<li>域名服务器的 IP 地址</li>
</ol>
</blockquote>
<blockquote>
<p>IP地址获取方式有两种：</p>
<ul>
<li>静态IP是人工自己指定的，一般公司自己组建的局域网、学校机房的固定的计算机、机房服务器、互联网上的大型服务器，凡是位置固定不动的，都用静态IP地址。 </li>
<li>动态IP地址是用DHCP服务器来分配的地址，适用于计算机位置不固定、家庭拨号上网等情况。可以避免产生IP地址冲突。</li>
</ul>
</blockquote>
<blockquote>
<p>DHCP服务器既可以给本网段计算机分配地址，也可以跨网段分配地址。DHCP服务器想给几个网段的计算机分配地址，就得先创建几个作用域。区别是，本网段的计算机请求地址，发广播，DHCP服务器能直接收到请求；而外网段的计算机请求地址，先发广播让外网段的网关收到（网关隔绝广播，为了能使这条请求发出去，路由器上需要特殊配置一下Router(config-if)#ip helper-address 192.168.0.100这个IP是DHCP服务器地址），该网关把请求通过互联网发送给DHCP服务器（这时候就是点对点通信而不是广播了）</p>
</blockquote>
<h3 id="FTP文件传送协议"><a href="#FTP文件传送协议" class="headerlink" title="FTP文件传送协议"></a>FTP文件传送协议</h3><blockquote>
<p>FTP连接方式 </p>
<ul>
<li>控制连接：标准端口为21，用于发送FTP命令信息。 </li>
<li>数据连接：标准端口为20，用于上传、下载数据。 </li>
</ul>
</blockquote>
<blockquote>
<p>客户端选择数据连接的建立类型 </p>
<ul>
<li>主动模式：FTP客户端告诉FTP服务器使用什么端口，FTP服务器就主动用自己的20端口和FTP客户端的这个端口建立连接。 </li>
<li>被动模式：服务端在指定范围内打开一个新的端口，被动等待客户端发起连接。 </li>
</ul>
</blockquote>
<blockquote>
<p>FTP传输模式 </p>
<ul>
<li>文本模式：ASCII模式，以文本序列传输数据 </li>
<li>二进制模式：Binary模式，以二进制序列传输数据 </li>
</ul>
</blockquote>
<h3 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h3><blockquote>
<p>只要网络通，就能利用telnet输入命令来远程控制另一台计算机。一般多用来远程配置路由器。使用TCP的23端口。</p>
</blockquote>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><blockquote>
<p>是用的最多的协议，用来访问网站的协议。使用TCP的80端口。</p>
</blockquote>
<blockquote>
<p>为何访问网站要用域名？</p>
<ul>
<li>网站的标识有IP地址、端口和域名。因此访问网站时，为了区分不同的网站，可以使用不同的IP地址、不同的端口或不同的主机头（域名）。</li>
<li>同一个服务器上如果有好几个网站，这些网站如果都使用一个服务器IP地址，都使用80端口，会有冲突。解决方法一是给服务器多加几个IP地址，一个网站用一个；二是给不同网站用不同的端口号，不要都用80端口。然而这两种方式都不方便。如果服务器只有一个地址，并且端口号只想用80，那么可以在服务器设置网站的访问方式，设置成只能用域名来访问。但是用域名访问，还需要在DNS里把记录加上。目前网络上各大服务器中存储的成千上万的网站，都是用最后一种方法，用域名访问来实现的。</li>
</ul>
</blockquote>
<blockquote>
<p>使用Web代理服务器访问网站</p>
<p>访问网站时不直接访问，而是先访问代理服务器，代理服务器去找目标网站，然后再把得到的网站返回给请求计算机。</p>
</blockquote>
<blockquote>
<p>好处： </p>
<ul>
<li>节省内网访问Internet的带宽，加快上网速度。注意：别傻逼地用国外的代理上国内的网站，那得慢死！ </li>
<li>通过Web代理绕过防火墙。翻墙软件就是使用国外的代理来上网的，能避免国内路由器的封锁； </li>
<li>避免追踪。如果在网上发帖子，不想让别人查到自己的地址，那就用代理在网上发帖子。ISP那边的记录，只能查到是代理在发帖子，查不到自己这里。 </li>
<li>不用配网关（要上网的电脑和代理服务器在一个网段）、不用配DNS也能上网。 </li>
</ul>
</blockquote>
<blockquote>
<p>应用：在一个网段的计算机里，只要有一台计算机能上网，其他计算机就可以通过这台能上网的计算机上网。做法是将这台能上网的计算机设置成代理服务器，其他计算机指向它。</p>
</blockquote>
<h3 id="电子邮件服务"><a href="#电子邮件服务" class="headerlink" title="电子邮件服务"></a>电子邮件服务</h3><blockquote>
<ul>
<li>发送邮件的协议：SMTP使用TCP的25端口 </li>
<li>读取邮件的协议：POP3 使用TCP的110端口和 IMAP使用TCP的143端口 </li>
</ul>
</blockquote>
<blockquote>
<p>收发邮件的过程如下：</p>
<ol>
<li>发件人调用PC机中的用户代理撰写和编辑要发送的邮件。 </li>
<li>发件人的用户代理把邮件用SMTP协议发给发送方邮件服务器。 </li>
<li>SMTP服务器把邮件临时存放在邮件缓存队列中，等待发送。 </li>
<li>发送方邮件服务器的SMTP客户与接收方邮件服务器的SMTP服务器建立TCP连接，然后就把邮件缓存队列中的邮件依次发送出去。 </li>
<li>运行在接收方邮件服务器中的SMTP服务器进程收到邮件后，把邮件放入收件人的用户邮箱中，等待收件人进行读取。 </li>
<li>收件人在打算收信时，就运行PC机中的用户代理，使用POP3（或IMAP）协议读取发送给自己的邮件。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>网络层</title>
    <url>/2019/12/19/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<h3 id="网络层的概念"><a href="#网络层的概念" class="headerlink" title="网络层的概念"></a>网络层的概念</h3><p>在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。</p>
<h3 id="网络层的功能"><a href="#网络层的功能" class="headerlink" title="网络层的功能"></a>网络层的功能</h3><ul>
<li>转发</li>
</ul>
<blockquote>
<p>将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作，通过转发表实现。</p>
</blockquote>
<ul>
<li>路由选择</li>
</ul>
<blockquote>
<p>当分组从发送方流向接收方时，网络层必须决定这些分组所采用的路由或路径，通过路由选择算法实现。路由选择算法决定了插入路由器的转发表中的值。</p>
</blockquote>
<h3 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h3><p>使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。<br>与IP协议配套使用的还有三个协议:</p>
<ul>
<li>地址解析协议 ARP（Address Resolution Protocol）：每个主机都设有一个ARP高速缓存(ARP cache)，如果不存在，则进行广播，找到后返回ARP响应，得到目的主机的物理地址</li>
<li>网际控制报文协议 ICMP（Internet Control Message Protocol）：用于提高IP数据报交付成功的机会，允许主机或路由器报告差错情况和提供有关异常情况的报告，不是高层协议，而是IP层的协议。ICMP报文作为IP层数据报的数据</li>
<li>网际组管理协议 IGMP（Internet Group Management Protocol）</li>
</ul>
<h3 id="IPV4数据报格式"><a href="#IPV4数据报格式" class="headerlink" title="IPV4数据报格式"></a>IPV4数据报格式</h3><ul>
<li>版本</li>
</ul>
<blockquote>
<p>4 比特，有 4（IPv4）和 6（IPv6）两个值，规定了数据报的 IP 协议版本。</p>
</blockquote>
<ul>
<li>首部长度</li>
</ul>
<blockquote>
<p>4 比特，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。确定 IP 数据报中数据部分实际从哪里开始。大部分 IP 数据报不包含此选项，默认 20 字节长度。</p>
</blockquote>
<ul>
<li>区分服务</li>
</ul>
<blockquote>
<p>用来获得更好的服务，一般情况下不使用。使得不同类型的 IP 数据报能够相互区别开来（如实时数据报与非实时流量等）。</p>
</blockquote>
<ul>
<li>总长度</li>
</ul>
<blockquote>
<p>16 比特，包括首部长度和数据部分长度。以字节计算。</p>
</blockquote>
<ul>
<li>生存时间</li>
</ul>
<blockquote>
<p>TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</p>
</blockquote>
<ul>
<li>协议</li>
</ul>
<blockquote>
<p>指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。仅在一个 IP 数据报到达其最终目的地时才有用。协议号作用类似于端口号，将网络层与运输层绑定。（端口号绑定运输层与应用层）</p>
</blockquote>
<ul>
<li>首部检验和:</li>
</ul>
<blockquote>
<p>因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分，仅针对首部，可以减少计算的工作量。用于帮助路由器检测收到的 IP 数据报中的比特错误。</p>
</blockquote>
<ul>
<li>标志:</li>
</ul>
<blockquote>
<p>最后一个片的标志比特被设为 0，其他片的标志为 1。保证完整性。</p>
</blockquote>
<ul>
<li>标识</li>
</ul>
<blockquote>
<p>在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。主机将其发送的每个数据报标识号加 1，目的地端系统通过检查标识号判定是否来自同一数据报。</p>
</blockquote>
<ul>
<li>片漂移</li>
</ul>
<blockquote>
<p>和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。指示片属于初始数据报的哪个位置，以保证有序性。</p>
</blockquote>
<blockquote>
<p>​分片后的重组由端系统完成，在 IP 层完全重组后才会被传递给运输层，若数据不完整则被丢弃（若运输层使用 TCP，则通过重传恢复丢包）。</p>
</blockquote>
<blockquote>
<p>​    分片存在问题：复杂化路由器与端系统、致命的 DoS 攻击，如 Jolt2（所发送的片流中不存在偏移量为 0 的片导致重组崩溃）或发送交迭的 IP 片，无法适当排列，导致重组崩溃。</p>
<ul>
<li>选项 / 可选部分：<br>允许 IP 首部被扩展，但是很少使用，由于对每个数据报首部不包括选项字段中的信息可节约开销，IPv6 数据报也去除该字段。</li>
<li>数据 / 有效载荷：<br>通常情况下指要交付给目的地的运输层报文段（TCP / UDP），特殊情况下可传输 ICMP 报文。</li>
</ul>
</blockquote>
<h3 id="IP地址编址方式"><a href="#IP地址编址方式" class="headerlink" title="IP地址编址方式"></a>IP地址编址方式</h3><p>IP 地址的编址方式利用点分十进制记法，经历了三个历史阶段：</p>
<ul>
<li>分类</li>
<li>子网划分</li>
<li>无分类</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p>
<p>IP 地址 ::= {&lt;网络号&gt;, &lt; 主机号 &gt;}</p>
<ul>
<li><p>A类: A 类地址总共有 128 个地址块，其中 3 个地址块用作特殊用途，因此可以在互联网上使用的有 125 个，每一个地址块中可以拥有个 224−2=16777216−2=16777214<br>2<br>24<br>−2=16777216−2=16777214 主机。（扣除的两个为特殊地址，全 0 和全 1）</p>
</li>
<li><p>B类：B 类地址总共有 16384 个地址块，其中 16 个地址块用作特殊用途，因此可以分配给企业使用的地址块有 16368 个，每一个地址块中可以拥有个 $ 2^{16}-2 $ 主机。</p>
</li>
<li><p>C类：C 类地址总共有 2097152 个地址块，其中 256 个地址块用作特殊用途，因此可以分配给企业使用的地址块有 2096896 个，每一个地址块中可以拥有个 254 主机。</p>
</li>
<li><p>D类：用于多播使用，只有一个地址块。</p>
</li>
<li><p>E类：保留未用，只有一个地址块。</p>
</li>
<li><p>分类范围</p>
</li>
<li><p>特殊地址</p>
<blockquote>
<p>网络号为 127 的地址：被保留用于环回测试。指向本地结点并允许结点发送测试数据包给自己而不产生网络流量</p>
</blockquote>
<blockquote>
<p>结点地址（主机号）全为 0：意指 “网络地址”</p>
</blockquote>
<blockquote>
<p>结点地址全为 1：意指指定网络的 “所有结点”（广播地址），例如：128.2.255.255 意指 128.2 网络的 “所有结点”</p>
</blockquote>
<blockquote>
<p>全 0 的网络地址（即 0 网段）：被保留用来指向默认路由</p>
</blockquote>
<blockquote>
<p>route -PRINT 可以用来查看路由表信息</p>
</blockquote>
</li>
</ul>
<h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><p><strong>子网定义</strong>：为了确定子网，分开主机和路由器的每个接口，产生几个隔离的网络岛，使用接口端接这些隔离的网络的端点。这些隔离的网络中的每一个都叫做一个子网。</p>
<p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p>
<p>IP 地址 ::= {&lt;网络号&gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p>
<p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p>
<p>注意，外部网络看不到子网的存在。</p>
<h4 id="无类别域间路由选择"><a href="#无类别域间路由选择" class="headerlink" title="无类别域间路由选择"></a>无类别域间路由选择</h4><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p>
<p>IP 地址 ::= {&lt;网络前缀号&gt;, &lt; 主机号 &gt;}</p>
<p>实例：a.b.c.d/x，x 指示了地址第一部分中的比特数。外部路由器仅需考虑地址的前缀比特 x 即可进行数据报转发。剩余的 32 - x 比特可用于区分该组织内部设备。</p>
<p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p>
<p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p>
<p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种使用单个网络前缀通告多个网络的能力、通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。</p>
<p>在路由表中的项目由 “网络前缀” 和 “下一跳地址” 组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>运输层</title>
    <url>/2019/12/19/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h3 id="运输层概念"><a href="#运输层概念" class="headerlink" title="运输层概念"></a>运输层概念</h3><p>运输层提供了进程间的逻辑通信，运输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个运输层实体之间有一条端到端的逻辑通信信道。</p>
<h3 id="运输层的两个主要协议"><a href="#运输层的两个主要协议" class="headerlink" title="运输层的两个主要协议"></a>运输层的两个主要协议</h3><h4 id="用户数据报协议UDP（User-Datagram-Protocol）"><a href="#用户数据报协议UDP（User-Datagram-Protocol）" class="headerlink" title="用户数据报协议UDP（User Datagram Protocol）"></a>用户数据报协议UDP（User Datagram Protocol）</h4><p>UDP只在IP数据报服务之上增加了复用分用以及差错检测的功能。</p>
<p>主要特点:</p>
<ol>
<li>无连接的</li>
<li>尽最大努力交付</li>
<li>UDP是面向报文的。发送发的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。</li>
<li>UDP没有拥塞控制。因此网络出现拥塞不会使源主机的发送速率降低。这对如IP电话、实时视频会议的实时应用很重要。这些应用要求源主机以恒定的速率发送数据。并且允许在网络发生拥塞时丢失一些数据，但不允许数据有太大时延。</li>
<li>UDP支持一对一、一对多、多对一、多对多的交互通信。</li>
<li>UDP的首部只有8字节，开销小。</li>
</ol>
<h4 id="传输控制协议TCP（Transmission-Control-Protocol）"><a href="#传输控制协议TCP（Transmission-Control-Protocol）" class="headerlink" title="传输控制协议TCP（Transmission Control Protocol）"></a>传输控制协议TCP（Transmission Control Protocol）</h4><p>每一条TCP连接只能有两个端点(endpoint,一个发,一个收),每一条TCP连接只能是点对点的(一对一)<br>主要特点:</p>
<ol>
<li>面向连接</li>
<li>每一条TCP协议只能是点对点的</li>
<li>TCP提供可靠交付服务</li>
<li>提供全双工通信</li>
<li>面向字节流</li>
</ol>
<h4 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h4><p>一个TCP报文分为首部和数据两部分。</p>
<p>TCP首部的前20个字节是固定的，后面4n个字节是根据需要而增加的选项。因此TCP首部的最小长度是20字节。</p>
<p>首部固定部分个字段的意义：</p>
<ol>
<li><p>源端口和目的端口   各占2字节。</p>
</li>
<li><p>序号  占4字节。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号。例如，一报文段的序号字段值是301，而携带的数据共有100字节。则下一个报文段的序号字段值为401.</p>
</li>
<li><p>确认号   占4字节，示期望收到对方下一个报文段的第一个数据字节的序号。若确认号为N，则表明到序号N-1为止的所有数据都已正确收到。</p>
</li>
<li><p>数据偏移  占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。这个字段实际上是指出TCP报文段的首部长度。TCP报文首部的最大长度是60字节。</p>
</li>
<li><p>保留  占6位，保留位今后所用，目前置0.</p>
</li>
</ol>
<p>下面有六个控制位说明本报文段的性质。</p>
<ol start="6">
<li><p>紧急URG  当URG=1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送，而不要按原来的排队顺序来传送。</p>
</li>
<li><p>确认ACK   当ACK=1时确认号字段才有效。TCP规定，在连接建立后所有传送的报文都必须把ACK置1.</p>
</li>
<li><p>推送PSH  当两个应用进程进行交互通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应。在这个时候，发送方将PSH置1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文后，就尽快交付给进程，而不再等待缓存都填满后再交付。</p>
</li>
<li><p>复位RST  当RST=1时，表明TCP连接中出现重大错误，需要释放连接。还可以用来拒绝打开一个连接或非法报文。</p>
</li>
<li><p>同步SYN  在连接建立时用来同步序号。当SYN = 1而ACK = 0时，表明这是一个连接请求报文。若对方同意连接，则应在响应的报文段中使SYN=1和ACK=1.因此SYN=1表示这是一个连接请求或连接接收报文。</p>
</li>
<li><p>终止FIN  用来释放一个连接。当FIN=1时，表明此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</p>
</li>
<li><p>窗口  占2字节。指明了现在允许对方发送的数据量。</p>
</li>
<li><p>校验和  占2字节。校验和字段检验首部和数据两部分。</p>
</li>
<li><p>紧急指针  占2字节。仅在URG=1才有意义，指出本报文段中的紧急数据字节数。</p>
</li>
<li><p>选项  长度可变，最长可达40字节。</p>
</li>
</ol>
<p>MSS最大报文段长度，是每一个TCP报文段中的数据字段的最大长度。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2019/12/19/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<h3 id="数据链路层的基本概念"><a href="#数据链路层的基本概念" class="headerlink" title="数据链路层的基本概念"></a>数据链路层的基本概念</h3><p>一、数据链路层使用的信道主要有以下两种类型:</p>
<ul>
<li>点对点信道：这种信道使用一对一的点对点通信方式。</li>
<li>广播通信：这种信道使用一对多的广播通信方式。</li>
</ul>
<p>二、链路和数据链路的区别:</p>
<ul>
<li>链路: 是一条点到点的物理路段,中间没有其他任何点。一条链路只是一条通路的一个组成部分。</li>
<li>数据链路: 除了物理线路外,还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上,就构成了数据链路。<br> 数据链路层把网络层交下来的数据构成帧发送到链路上,以及把接收到的帧中的数据取出上交给网络层.在因特网中,网络协议数据单元就是IP数据报(简称数据报,分组或包)</li>
</ul>
<p>三、数据链路层的三个基本问题</p>
<ol>
<li>封装成帧(framing)<br>​    就是在一段数据的前后分别添加首部和尾部,这样就构成了一个帧,确定帧的界限。<br> 我们知道:所有在因特网上传送的数据都是以分组(即IP数据报)为传送单位的,网络层饿IP数据传送到数据链路层就成为帧的数据部分.帧的数据部分的前面和后面分别添加上首部和尾部,就构成了一个完整的帧.这样的帧就是数据链路层的数据传输单元。首部和尾部的一个重要作用就是进行帧定界。</li>
<li>透明传输<br> 由于帧的开始和结束的标记是使用专门指明的控制字符,因此,所传输的数据中的任何8比特的组合一定不允许和用作帧定界的控制字符的比特编码一样,否则就会出现帧定界错误。<br>数据链路层对这些数据来说是透明的:表示无论什么样的比特组合的数据都能够通过数据链路层.</li>
<li>差错检测<br>​    在一段时间内,传输错误的比特占所传输比特总数的比率称为误码率(BER)<br>​    为了保证数据传输的可靠性,在计算机网络传输数据时,必须采用各种差错检测措施.目前在数据链路层广泛使用了循环冗余检验CRC的检测技术.<br> 仅用循环冗余检验CRC差错检测技术只能做到无差错接受,即近似地认为:”反是接收端数据链路层接受的帧均无差错”</li>
</ol>
<h3 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h3><p>PPP协议就是用户计算机和ISP进行通信时所使用的数据链路层协议.<br>PPP协议的组成:</p>
<ul>
<li>一个将IP数据报封装到串行链路的方法.</li>
<li>一个用来建立,配置和测试数据链路连接的链路控制协议LCP</li>
<li>一套网络控制协议NCP,其中每一个协议支持不同的网络层协议,如IP,OSI的网络层,DECnet,以及AppleTalk等.</li>
</ul>
<h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><ul>
<li><p>以太网的两个标准</p>
<blockquote>
<p>DIX  Ethernet V2<br>IEEE 的 802.3标准</p>
</blockquote>
</li>
<li><p>以太网和数据链路层的两个子层</p>
<blockquote>
<p>为了使数据链路层能够更好地适应多种局域网标准,IEEE 802 委员会就把局域网的数据链路层拆成两个子层,即逻辑链路控制层LLC子层和媒体接入层MAC子层.<br>与接入到传输媒体有关的内容都放在MAC子层,LLC子层则与传输媒体无关,不管采用何种传输媒体和MAC子层的局域网对LLC子层来说都是透明的.</p>
</blockquote>
</li>
<li><p>以太网提供的服务</p>
<blockquote>
<p>以太网提供的服务是不可靠的交付,基金最大努力的交付.<br>​当接收站收到有差错的数据帧时就丢弃此帧,其他什么也不做.差错的纠正由高层决定.<br>​如果高层发现丢失了一些数据而进行重传,但以太网并不知道这是一个重传的帧,而是当作一个新的数据帧来发送.</p>
</blockquote>
</li>
<li><p>MAC层的硬件地址</p>
<blockquote>
<p>局域网中,硬件地址又称物理地址,或MAC地址</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>物理层</title>
    <url>/2019/12/18/hello-world/</url>
    <content><![CDATA[<h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><blockquote>
<p>物理层解决如何在连接各种计算机的传输媒体上数据比特流,而不指具体的传输媒体。可以将物理层的主要任务描述为确定与传输媒体的接口有关的一些特性。机械特性接口形状,尺寸,引脚数目和排列。</p>
</blockquote>
<h3 id="物理层的作用"><a href="#物理层的作用" class="headerlink" title="物理层的作用"></a>物理层的作用</h3><blockquote>
<p>在计算机之间进行比特流传入。屏蔽到传输媒介和通信手段的差异，使数据链路层无需考虑这些问题。同时计算机多采用并行传输，而通信线路多采用串行传输，因此物理层还要完成传输方式的转换。主要任务就是确认与传输媒介的接口的特征。</p>
</blockquote>
<h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><ol>
<li>导向传输媒体：导向传输媒体中,电磁波沿着固体媒体传播。具体有:<ol>
<li>双绞线<ul>
<li>屏蔽双绞线STP</li>
<li>无屏蔽双绞线UTP</li>
</ul>
</li>
<li>同轴电缆<ul>
<li>50Ω同轴电缆 由于数字传输,多用于基带传输</li>
<li>75Ω同轴电缆 用于模拟传输,即宽带同轴电缆</li>
</ul>
</li>
<li>光纤</li>
</ol>
</li>
<li>非导向传输媒体：就是指自由空间,其中的电磁波传输被称为无线传输  无线传输所使用的频段很广<ul>
<li>短波通讯主要是靠电离层的反射,但短波信道的通信质量较差</li>
<li>微波在空间主要是直线传播  地面微波接力传播 卫星通信</li>
</ul>
</li>
</ol>
<h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><ul>
<li>频分复用：在分配到一定的频率后,在通信过程中自始至终都占用这个频带。频分复用的所用用户在同样的时间占用不同的带宽资源(这里的带宽指的是频率带宽而不是数据的发送频率)</li>
<li>时分复用：是将时间划分为一段段等长的时分复用帧.每一个时分复用的用户在每一个TDM帧占用固定的时隙。时分复用的所有用户是在不同的时间占用同样的频带宽度。</li>
<li>统计时分复用：​是一种改进的时分复用,他能明显地提高信道的利用率</li>
<li>波分复用：就是光的频分复用。</li>
<li>码分复用CDM：是另一种共享信道的方法,实际上更常用的是码分多址CDMA.每个用户可以在同样的时间使用同样的频带进行通信.由于个用户使用经过特殊挑选的不同码型,因此各用户之间不会造成干扰。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络概述</title>
    <url>/2019/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="互联网概述"><a href="#互联网概述" class="headerlink" title="互联网概述"></a>互联网概述</h3><ul>
<li>计算机网络（网络）<blockquote>
<p>计算机是由结点（node）和连接这些结点的链路（link）组成，结点可以是计算机、集线器、交换机或路由器组成。一般用一朵云表示网络。通过集线器或交换机组成。</p>
</blockquote>
</li>
<li>互联网<blockquote>
<p>网络之间通过路由器互连起来，这样就构成了一个范围更大的网络，称为互连网(internet 或 internetwork)，泛指由多个计算机网络互连二次的计算机网络。<br>互连网并不是把计算机仅仅简单地在物理上连接起来，这样并不能达到计算机之间交换数据。还必须安装交换数据的软件。</p>
</blockquote>
</li>
<li>因特网<blockquote>
<p>因特网（Internet）特指全球最大的互连网。</p>
</blockquote>
</li>
</ul>
<h3 id="互联网发展的三个阶段"><a href="#互联网发展的三个阶段" class="headerlink" title="互联网发展的三个阶段"></a>互联网发展的三个阶段</h3><ul>
<li>第一阶段是从单个网络ARPANET向互连网发展的过程。</li>
<li>第二阶段是建成了三级结构的互联网，分为：主干网、地区网、和校园网（企业网）。主干网连接各个地区网，地区网连接各个校园网（企业网）。</li>
<li>第三阶段形成了多层次ISP结构的互联网。ISP(Internet Service Provider) 互联网服务提供商。例如：中国联通、中国电信。他们运行主干ISP网络</li>
</ul>
<h3 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h3><ul>
<li>边缘部分：<blockquote>
<p>有所有连接在互联网上的主机组成，这些主机又称为端系统，可以使个人电脑、很小的网络摄像头、ISP等，边缘部分利用核心部分提供的服务使众多主机之间能够互相通信（指：两个主机之间的两个进程之间进行通信）。在网络边缘的端系统之间的通信方式可以分为两大类：客户-服务器方式（C/S方式）和 对等方式（P2P方式）。</p>
</blockquote>
</li>
<li>客户-服务器方式（C/S）：<blockquote>
<p>客户（client）和 服务器（server）都是指通信中所涉及的两个应用进程。客户-服务器方式所描述的是进程之间服务和被服务之间的关系。客户是服务请求方，服务器是服务提供方。</p>
</blockquote>
</li>
<li>客户程序特点<blockquote>
<p>被用户调用后运行，在通信时向远程服务器发起通信（请求服务）。因此，客户程序必须知道服务器的地址。<br>不需要特殊的硬件和很复杂的操作系统。</p>
</blockquote>
</li>
<li>服务器程序特点<blockquote>
<p>是一种专门用来提供某种服务的程序，可同时处理多个本地或远程客户的请求。<br>自系统启动后就一直不断地运行，被动地等待并接受来自各地用户的通信请求。因此，服务器程序不需要知道客户程序的地址。<br>一般需要强大的硬件和高级的操作系统支持。</p>
</blockquote>
</li>
</ul>
<h3 id="互联网的核心部分"><a href="#互联网的核心部分" class="headerlink" title="互联网的核心部分"></a>互联网的核心部分</h3><blockquote>
<p>在网络核心部分其特殊作用的是路由器(router)，它是一种专用计算机（但不叫主机）。路由器是实现分组交换(packet switching)的关键构建，它的任务是转发收到的分组，是网络核心中最重要的内容。</p>
</blockquote>
<h3 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h3><ul>
<li><p>按照网络的作用范围来分类：</p>
<ul>
<li>广域网 WAN（Wide Area Network） 广域网的作用范围通常几十到几千公里，是互联网的核心部分，其任务是长距离运送主机所发送的数据。</li>
<li>城域网 MAN（Metropolitan Area Network） 城域网的作用范围一般是一个城市。</li>
<li>局域网 LAN（Local Area Network） 局域网一般用微型计算机或工作站通过高速通信线路相连，但范围较小。</li>
<li>个人区域网 PAN（Personal Area Network） 个人区域网就是在个人工作的地方把属于个人使用的电子设备用无线技术连接起来的网络。</li>
</ul>
</li>
<li><p>按照网络的使用者分类：</p>
<ul>
<li>公用网（public network） 指电信公司出资建造的大型网络，所有缴费的人都能用。</li>
<li>专用网（private network） 某个部门为满足本单位的特殊业务工作的需要而建造的网络。这种网络不向本单位以外的人提供服务。例如：军队、铁路、银行等系统均有本系统的专用网。</li>
</ul>
</li>
</ul>
<h3 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h3><blockquote>
<p>OSI七层模型:</p>
</blockquote>
<ul>
<li>应用层：就是能产生网络流量的应用程序。</li>
<li>表示层：数据的表示、加密、压缩。</li>
<li>会话层：应用程序之间建立的会话。</li>
<li>传输层：可靠传输（建立会话）、不可靠传输、流量 控制</li>
<li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。</li>
<li>数据链路层：封装数据、添加物理层地址</li>
<li>物理层：提供物理规范，如线缆标准、接口标准、电压。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
</search>
